geodata.sql.ipLookup=SELECT geoname_id, geoname_country_id from geoip WHERE :ip BETWEEN first and last LIMIT 1
geodata.sql.geonamesbyid=SELECT *, st_x(coord) as lat, st_y(coord) as lng from geonames WHERE id = :id
geodata.sql.geonamescount=SELECT COUNT(id) FROM geonames
geodata.sql.findcountrybyphone=SELECT n.*, c.iso, c.geoname_id, c.country FROM geocountry c, geonames n WHERE c.geoname_id = n.id AND :phone like CONCAT(phone, '%') ORDER BY population DESC
geodata.sql.findwithinboundaries=SELECT id FROM geoboundaries WHERE st_within(coord, st_envelope(linestring(point(:minX, :minY), point(:maxX, :maxY)))) AND st_contains(raw_polygon, POINT(:x,:y)) ORDER BY area ASC LIMIT :limit
geodata.sql.findnearest=SELECT *, st_distance(POINT(:x, :y), coord) AS distance FROM geonames WHERE st_within(coord, st_envelope(linestring(point(:minX, :minY), point(:maxX,:maxY)))) ORDER BY distance ASC LIMIT :offset, :limit
geodata.sql.findbyids=SELECT *, st_x(coord) as lat, st_y(coord) as lng from geonames WHERE id in (:ids)
geodata.sql.findboundariesbyid=SELECT ST_AsBinary(raw_polygon) as wkb FROM geoboundaries WHERE id = :id
geodata.sql.findcountriesoncontinent=SELECT *, st_x(coord) as lat, st_y(coord) as lng FROM geocountry c, geonames n WHERE c.geoname_id = n.id AND continent = :continentCode LIMIT :offset,:max
geodata.sql.countcountriesoncontinent=SELECT COUNT(iso) FROM geocountry WHERE continent = :continentCode
geodata.sql.findcountrychildren=select *, st_x(coord) as lat, st_y(coord) as lng from geonames where country_code = :cc and feature_code_id = :feature_code_id LIMIT :offset,:max
geodata.sql.countcountrychildren=select COUNT(id) from geonames where country_code = :cc and feature_code_id = :feature_code_id
geodata.sql.findbyname=SELECT *, MATCH(name) AGAINST (:name) as relevance FROM geonames WHERE MATCH (name) AGAINST(:name IN  BOOLEAN MODE)  ORDER  BY relevance DESC, population DESC LIMIT :offset, :limit
geodata.sql.countbyname=SELECT count(id) FROM geonames WHERE MATCH (name) AGAINST(:name IN  BOOLEAN MODE)